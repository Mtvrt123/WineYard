service: wine-management-system
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  endpoint: http://localhost:4566
  sns:
    endpoint: http://localhost:4566

  environment:
    BOTTLE_TABLE: ${self:service}-bottle
    USERS_TABLE: ${self:service}-users
    EVENTS_TABLE: ${self:service}-events
    UPLOAD_BUCKET: ${self:service}-uploads
    JWT_SECRET: bestSecretKey
    ADMIN_EMAIL: testemail@mail.com
    SOURCE_EMAIL: wine-management-system@local.com
    SNS_TOPIC_ARN: arn:aws:sns:us-east-1:000000000000:wine-management-system-topic


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOTTLE_TABLE}"
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: "*"
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: ${self:provider.environment.SNS_TOPIC_ARN}

plugins:
  - serverless-offline
  - serverless-localstack
  - serverless-offline-ses-v2

custom:
  localstack:
    stages:
      - local

  serverless-offline-ses-v2:
    endpoint: http://localhost:4566
    region: us-east-1
    start:
      port: 9001
      mock: true

functions:
  createBottle:
    handler: handler.createBottle
    events:
      - http:
          path: /bottle
          method: post
          cors: true

  getBottles:
    handler: handler.getBottles
    events:
      - http:
          path: /bottles
          method: get
          cors: true

  getBottle:
    handler: handler.getBottle
    events:
      - http:
          path: /bottle/{id}
          method: get
          cors: true

  updateBottle:
    handler: handler.updateBottle
    events:
      - http:
          path: /bottle/{id}
          method: put
          cors: true

  deleteBottle:
    handler: handler.deleteBottle
    events:
      - http:
          path: /bottle/{id}
          method: delete
          cors: true

  getAllEvents:
    handler: handler.getAllEvents
    events:
      - http:
          path: /events
          method: get
          cors: true

  getToken:
    handler: handler.getToken
    events:
      - http:
          path: /token
          method: post
          cors: true

  createUser:
    handler: handler.createUser
    events:
      - http:
          path: /user
          method: post
          cors: true

  SnsLogMessage:
    handler: handler.SnsLogMessage
    events:
      - sns:
          topicName: wine-management-sns-topic

  sendSnsNotification:
    handler: handler.sendSnsNotification

  logTableChanges:
    handler: handler.logTableChanges
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - WineManagementSystemBottleTable
              - StreamArn

  scheduledEvent:
    handler: handler.scheduledEvent
    events:
      - schedule:
          rate: rate(15 minute)
          name: dailyWineManagementEvent
          description: "Daily scheduled event for the wine management system"

  logS3Event:
    handler: handler.logS3Event
    events:
      - s3:
          bucket: wine-management-system-uploads
          event: s3:ObjectCreated:*

resources:
  Resources:
  
    WineManagementSystemBottleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: wine-management-system-bottle
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    WineManagementSystemUploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: wine-management-system-uploads

    WineManagementSystemTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: wine-management-system-topic

    SnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: ${self:provider.environment.SNS_TOPIC_ARN}
        Protocol: email
        Endpoint: ${self:provider.environment.ADMIN_EMAIL}

